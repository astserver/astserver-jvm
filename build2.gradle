buildscript {
  ext.kotlin_version = '1.1.4-3'
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0.RC5-6"
  }
}

plugins {
  id 'io.gitlab.arturbosch.detekt' version '1.0.0.RC5-6'
}

detekt {
  version = "1.0.0.RC5-6"
  profile("main") {
    input = "$projectDir/src/main/kotlin"
    config = "$projectDir/detekt.yml"
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
  }
}

apply plugin: 'antlr'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
//apply plugin: "io.gitlab.arturbosch.detekt"

mainClassName = 'org.astserver.MainKt'

defaultTasks 'run'

repositories {
  mavenCentral()
  jcenter()
}

configurations {
  ktlint
  detekt
}

dependencies {
  // compile 'javax.servlet:javax.servlet-api:3.0.1'
  // compile "com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.2"

  compile "com.github.arteam:simple-json-rpc-server:0.5"
  compile "org.slf4j:slf4j-simple:1.7.25"

  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  //compile 'com.google.code.gson:gson:2.8.2'
  antlr "org.antlr:antlr4:4.7"
  testCompile 'junit:junit:4.11'
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"

  ktlint "com.github.shyiko:ktlint:0.14.0"
}

sourceSets {
  generated {
    java.srcDir "${buildDir}/generated/src/antlr/"
  }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more    
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.1"
}

def grammarFiles(String... files) {
  files.collect({
    file -> fileTree(dir:'grammars-v4')
    .matching{include file}
    .getFiles()
  })
}
task copyGrammars(type: Copy) {
  from grammarFiles(
    // Programming languages
    'c/*.g4',
    'clojure/*.g4',
    'cpp/*.g4',
    'csharp/*.g4',
    'ecmascript/*.g4', // JavaScript ES5
    'erlang/*.g4',
    'fortran77/*.g4', // Note: causes a warning in parser generation
    'golang/*.g4',
    'java9/*.g4',
    //'javascript/*.g4', 'javascript/Java/*.java', // JavaScript with ES6 syntax
    'kotlin/*.g4',
    'lua/*.g4',
    'objc/one-step-processing/*.g4', // Objective-C
    'pascal/*.g4',
    'php/*.g4', // PHP 5.6
    'prolog/*.g4',
    //'python2/*.g4', // Python 2.7.13
    'python3/*.g4', // Python 3.6
    'python3alt/*.g4', // Python 3.3.6 with graceful fallback for Python2-isms
    'r/*.g4',
    'ruby/*.g4', // Ruby-like language Corundum for Parrot VM
    'scala/*.g4', // Scala 2.11
    'sexpression/*.g4', // Lisp s-expressions
    'smalltalk/*.g4',
    // Don't include the Swift 2 grammar as it has name conflicts with Swift 3
    //'swift2/*.g4', 'swift2/src/main/java/*.java', // Swift 2.2
    //'swift3/*.g4', 'swift3/src/main/java/*.java', // Swift 3
    'vb6/*.g4',
    'vba/*.g4',
    'verilog/*.g4', // Verilog hardware description language
    'vhdl/*.g4', // VHDL hardware description language
    'peoplecode/*.g4', // PeopleSoft business logic programming language
    'powerbuilder/*.g4', // Sybase Powerbuilder
    //'antlr4/ANTLRv4Lexer.g4', 'antlr4/ANTLRv4Parser.g4', 'antlr4/LexBasic.g4',

    // Domain specific / data languages
    'css3/*.g4',
    'csv/*.g4',
    'graphql/*.g4',
    'html/*.g4',
    'json/*.g4',
    'less/*.g4',
    'properties/*.g4', // Java properties files
    'protobuf3/*.g4', // Protocol buffers v3
    'scss/*.g4',
    'xml/*.g4',

    // SQL dialects
    'fusion-tables/*.g4',
    'mdx/*.g4',
    'mysql/*.g4',
    'plsql/*.g4', // Oracle PL/SQL
    // 'jpa/*.g4', // Causes a warning in parser generation
    'sparql/*.g4',
    'sqlite/*.g4',
    'tsql/*.g4', // Transact-SQL, MSSQL
  )
  into 'build/antlr/grammars'
}

sourceSets.main.antlr.srcDirs = ['build/antlr/grammars']

generateGrammarSource {
  dependsOn copyGrammars
  outputDirectory = file("${project.buildDir}/generated-src/antlr/main/")
}

// task compileAntlrParsers(type: JavaCompile) {
//   dependsOn generateGrammarSource
//   source += file("${project.buildDir}/generated-src")
// }

// Run auto-formatter on each build
compileJava.dependsOn generateGrammarSource

check.dependsOn ktlintFormat
//check.dependsOn detekt

compileKotlin {
  dependsOn generateGrammarSource
  //source += file("${project.buildDir}/generated-src")
  source sourceSets.generated.java, sourceSets.main.kotlin
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

run {
  standardInput = System.in
}
